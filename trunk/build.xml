<?xml version="1.0" encoding="iso-8859-1" ?>

<!--
 Copyright 2000-2006 The Apache Software Foundation.

 Licensed under the Apache License, Version 2.0 (the "License")
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<project name="velosurf" default="usage" basedir=".">
  
  
  
  <!-- COMPILATION PARAMETERS -->
<!--  <property name="build.compiler"          value="jikes"/> -->
<!--  <property name="build.compiler.emacs"    value="true"/> -->

  <property name="debug" value="on"/>

  <!-- DIRECTORIES -->		
  <property name="build.dir"         value="${basedir}"/>
  <property name="src.dir"           value="${basedir}/src/java"/>
  <property name="output.dir" 	     value="${basedir}/class"/>
  <property name="lib.dir"           value="${basedir}/lib"/>
  <property name="test.dir"          value="${basedir}/test"/>
  <property name="tmp.dir"           value="${basedir}/tmp"/>
  <property name="docs.dir"           value="${basedir}/docs"/>
  <property name="javadoc.destdir"   value="${basedir}/docs/api"/>
  <property name="dist.root"         value="${basedir}/dist"/>
  <property name="test.src.dir"      value="${test.dir}/src"/>
  <property name="test.lib.dir"      value="${test.dir}/lib"/>
  <property name="test.rst.dir"      value="${test.dir}/rst"/>
  <property name="test.log.dir"      value="${test.dir}/log"/>
  <property name="test.output.dir"    value="${test.dir}/class"/>
  <property name="test.webapp.dir"    value="${test.dir}/webapp"/>

  <property name="test.jetty.dir"        value="${test.dir}/jetty"/>

  <!-- BUILD PROPERTIES -->
  <property file="${build.dir}/build.properties"/>                <!-- Component local   -->
  <property file="${user.home}/.ant.properties"/>   <!-- User local        -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->

  <!-- Build classpath automatically -->
   <path id="classpath">
     <fileset dir="./lib">
       <include name="**/*.jar"/>
     </fileset>
   </path>

    <!-- test classpath -->
    <path id="test.classpath">
      <path refid="classpath"/>
      <fileset dir="${test.lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
      <pathelement location="${test.output.dir}"/>
    </path>
  

  <!-- PATTERN SETS -->
  <patternset id="sources" >
    <include name="velosurf/**/*" />
  </patternset>

<!-- targets section -->

  <target name="usage" description="- list main ant targets">
    <echo>
No target specified.
Please specify a target among :
  jar : builds Velosurf jar
  clean : deletes all intermediary files
  javadoc : builds Velosurf javadoc
  tarball : builds Velosurf tgz package
  test : tests Velosurf
    </echo>
  </target>

  <target name="-prepare">

    <!-- MAKE THE DIRECTORIES IF NEEDED -->
    <mkdir dir="${lib.dir}"/>
    <mkdir dir="${output.dir}"/>
    <mkdir dir="${dist.root}/${final.name}" />
    <delete dir="${tmp.dir}" />
    <mkdir dir="${tmp.dir}" />
    <mkdir dir="${test.output.dir}" />
    <mkdir dir="${test.lib.dir}" />
    <mkdir dir="${test.log.dir}" />
    <mkdir dir="${test.log.dir}" />
    <mkdir dir="${test.jetty.dir}/logs" />
    <mkdir dir="${test.jetty.dir}/lib" />
    <mkdir dir="${test.webapp.dir}/WEB-INF/lib"/>
    <mkdir dir="${test.webapp.dir}/WEB-INF/log"/>
    <tstamp />

    <!-- CHECK JAVA VERSION -->
    <echo message="java version: ${ant.java.version}"/>
    <condition property="java.version.ok">
      <not>
        <or>
          <equals arg1="${ant.java.version}" arg2="1.1"/>
          <equals arg1="${ant.java.version}" arg2="1.2"/>
          <equals arg1="${ant.java.version}" arg2="1.3"/>
          <equals arg1="${ant.java.version}" arg2="1.4"/>
        </or>
      </not>
    </condition>
    <fail message="Velosurf requires at least Java 1.5" unless="java.version.ok"/>

    <condition property="use.java.1.5">
      <equals arg1="${ant.java.version}" arg2="1.5"/>
    </condition>
    <antcall target="-prepare.java.1.5"/>
    <condition property="use.java.1.6">
      <equals arg1="${ant.java.version}" arg2="1.6"/>
    </condition>
    <antcall target="-prepare.java.1.6"/>
    
    <!-- DOWNLOAD LIBRARIES IF NEEDED -->
    <antcall target="download" />
<!-- not downloadable libraries are kept in build.dir/lib -->
    <copy todir="${lib.dir}">
      <fileset dir="${build.dir}/lib"/>
    </copy>
  </target>

  <target name="-prepare.java.1.5" if="use.java.1.5">
    <copy file="${src.dir}/velosurf/sql/ConnectionWrapper.java.jdk5" tofile="${src.dir}/velosurf/sql/ConnectionWrapper.java" overwrite="true"/>
  </target>

  <target name="-prepare.java.1.6" if="use.java.1.6">
    <copy file="${src.dir}/velosurf/sql/ConnectionWrapper.java.jdk6" tofile="${src.dir}/velosurf/sql/ConnectionWrapper.java" overwrite="true"/>
  </target>

  <target name="clean" description="- clean all temporary build files">
    <delete dir="${output.dir}"/>
    <delete dir="${tmp.dir}"/>
    <delete dir="${dist.root}"/>
    <delete dir="${test.output.dir}"/>
    <delete dir="${test.rst.dir}"/>
    <delete dir="${test.log.dir}"/>
    <delete dir="${test.jetty.dir}/logs"/>
    <delete dir="${test.webapp.dir}/WEB-INF/lib"/>
    <delete dir="${test.webapp.dir}/WEB-INF/log"/>
  </target>

  <target name="clean-all" description="- clean all generated build files">
    <antcall target="clean"/>
    <delete dir="${lib.dir}"/>
    <delete dir="${test.lib.dir}"/>
    <delete dir="${test.jetty.dir}/lib"/>
    <delete dir="${dist.root}/${final.name}"/>
  </target>
  
  <target name="-download-if-needed" unless="skip.jar.loading">
    <condition property="jar.present">
      <and>
        <isfalse value="${force.jar.loading}"/>
        <available file="${download.dir}/${download.jar}-${download.version}.jar"/>
      </and>
    </condition>
    <antcall target="-http-download"/>
  </target>

  <target name="-http-download" unless="jar.present">
    <property name="download.group" value="${download.jar}"/> <!-- if not set previously -->
    <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    <get src="${repo.url}/${download.group}/${download.jar}/${download.version}/${download.jar}-${download.version}.jar"
         dest="${download.dir}/${download.jar}-${download.version}.jar"
         usetimestamp="true"
         verbose="false"
         ignoreerrors="false" />
  </target>

  <target name="download" description="- download all dependancy libraries needed for building">
   <property name="download.dir" value="${lib.dir}"/>
   <antcall target="-commons-beanutils-download"/>
   <antcall target="-commons-collections-download"/>
   <antcall target="-commons-lang-download"/>
   <antcall target="-commons-net-download"/>
   <antcall target="-crimson-download"/>
   <antcall target="-jdom-download"/>
   <antcall target="-servletapi-download"/>
   <antcall target="-velocity-download"/>
   <antcall target="-velocity-tools-download"/>
  </target>

  <target name="-commons-beanutils-download">
   <property name="download.jar" value="commons-beanutils" />
   <property name="download.version" value="${jar.commons-beanutils.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-commons-digester-download">
   <property name="download.jar" value="commons-digester" />
   <property name="download.version" value="${jar.commons-digester.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-commons-lang-download">
   <property name="download.jar" value="commons-lang" />
   <property name="download.version" value="${jar.commons-lang.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-commons-net-download">
   <property name="download.jar" value="commons-net" />
   <property name="download.version" value="${jar.commons-net.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-commons-collections-download">
   <property name="download.jar" value="commons-collections" />
   <property name="download.version" value="${jar.commons-collections.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-commons-logging-download">
   <property name="download.jar" value="commons-logging" />
   <property name="download.version" value="${jar.commons-logging.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-crimson-download">
   <property name="download.jar" value="crimson" />
   <property name="download.version" value="${jar.crimson.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-dom4j-download">
   <property name="download.jar" value="dom4j" />
   <property name="download.version" value="${jar.dom4j.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-jdom-download">
   <property name="download.jar" value="jdom" />
   <property name="download.version" value="${jar.jdom.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-servletapi-download">
   <property name="download.jar" value="servletapi" />
   <property name="download.version" value="${jar.servletapi.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-velocity-download">
   <property name="download.group" value="org/apache/velocity"/>
   <property name="download.jar" value="velocity" />
   <property name="download.version" value="${jar.velocity.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-velocity-tools-download">
   <property name="download.group" value="org/apache/velocity"/>
   <property name="download.jar" value="velocity-tools"/>
   <property name="download.version" value="${jar.velocity-tools.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <!-- test downloads --> 

  <target name="test-download" description="- download all dependancy libraries needed for testing">
   <property name="download.dir" value="${test.lib.dir}"/>
   <antcall target="-commons-digester-download"/>
   <antcall target="-hsqldb-download"/>
   <antcall target="-httpunit-download"/>
   <antcall target="-js-download"/>
   <antcall target="-junit-download"/>
   <antcall target="-nekohtml-download"/>
   <antcall target="-xerces-download"/>
   <antcall target="-xmlparserapis-download"/>
  </target>

  <target name="-jetty-main-download">
   <property name="download.dir" value="${test.jetty.dir}/lib"/>  
   <antcall target="-commons-logging-download"/>
   <antcall target="-jetty-download"/>
   <antcall target="-jetty-util-download"/>
   <antcall target="-servlet-api-2.5-download"/>
   <antcall target="-start-download"/>
  </target>

  <target name="-hsqldb-download">
   <property name="download.group" value="org/hsqldb"/>
   <property name="download.jar" value="hsqldb" />
   <property name="download.version" value="${jar.hsqldb.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-httpunit-download">
   <property name="download.jar" value="httpunit" />
   <property name="download.version" value="${jar.httpunit.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-jetty-download">
   <property name="download.jar" value="jetty" />
   <property name="download.version" value="${jar.jetty.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-jetty-util-download">
   <property name="download.dirname" value="jetty"/>
   <property name="download.jar" value="jetty-util" />
   <property name="download.version" value="${jar.jetty.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-js-download">
   <property name="download.group" value="rhino"/>
   <property name="download.jar" value="js" />
   <property name="download.version" value="${jar.js.version}" />
   <antcall target="-download-if-needed"/>
   <!-- httpunit wants a js.jar -->
   <copy file="${download.dir}/${download.jar}-${download.version}.jar" tofile="${download.dir}/js.jar"/>
  </target>

  <target name="-nekohtml-download">
   <property name="download.jar" value="nekohtml" />
   <property name="download.version" value="${jar.nekohtml.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-xerces-download">
   <property name="download.group" value="xerces" />
   <property name="download.jar" value="xercesImpl" />
   <property name="download.version" value="${jar.xercesimpl.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-xmlparserapis-download">
   <property name="download.group" value="xerces" />
   <property name="download.jar" value="xmlParserAPIs" />
   <property name="download.version" value="${jar.xmlparserapis.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-servlet-api-2.5-download">
   <property name="download.group" value="jetty"/>
   <property name="download.jar" value="servlet-api-2.5" />
   <property name="download.version" value="${jar.jetty.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-start-download">
   <property name="download.group" value="jetty"/>
   <property name="download.jar" value="start" />
   <property name="download.version" value="${jar.jetty.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="-junit-download">
   <property name="download.jar" value="junit" />
   <property name="download.version" value="${jar.junit.version}" />
   <antcall target="-download-if-needed"/>
  </target>

  <target name="jar" depends="-prepare" description="- builds Velosurf jar">
    <property name="myclasspath" refid="classpath"/>
    <echo message="using classpath= ${myclasspath}"/>
    <javac 
        srcdir="${src.dir}"
        destdir="${output.dir}"
        debug="${debug}"
        debuglevel="lines,vars,source"
        deprecation="on"
        optimize="on"
        encoding="UTF-8"
        source="1.5"
        target="1.5"
        includeantruntime="false">
	  <patternset refid="sources"/>
      <classpath refid="classpath"/>
<!--      <compilerarg value="-Xlint:unchecked"/> -->
	</javac>
    <jar jarfile="${basedir}/velosurf-${version}.jar" basedir="${output.dir}" >
	  <patternset refid="sources"/>
	</jar>
  </target>

  <target name="-compile-test" depends="-prepare,jar">
    <antcall target="test-download"/>
    <antcall target="-jetty-main-download"/>
    <copy file="${lib.dir}/commons-collections-${jar.commons-collections.version}.jar" todir="${test.lib.dir}"/>
    <property name="testclasspath" refid="test.classpath"/>
    <echo message="using classpath= ${testclasspath}"/>
    <javac srcdir="${test.src.dir}"
        destdir="${test.output.dir}"
        encoding="UTF-8"
        debug="${debug}"
        debuglevel="lines,vars,source"
        deprecation="on"
        optimize="on"
        source="1.5"
        target="1.5">
      <classpath>
        <path refid="classpath" />
        <path refid="test.classpath" />
        <filelist dir="${basedir}" files="velosurf-${version}.jar"/>
      </classpath>
    </javac>
    <javac srcdir="${test.jetty.dir}/src" destdir="${tmp.dir}" source="1.5" target="1.5">
      <classpath>
        <filelist dir="${test.jetty.dir}/lib" files="jetty-${jar.jetty.version}.jar,jetty-util-${jar.jetty.version}.jar"/>
      </classpath>
    </javac>
    <jar jarfile="${test.jetty.dir}/lib/webapplogger.jar" basedir="${tmp.dir}" includes="WebappLogger.class"/>
  </target>

  <target name="-stop-previous-jetty" if="${jetty-already-running}">
    <echo>Found a previously running instance of Jetty. Closing it...</echo>
    <antcall target="stop-jetty"/>
<!--
    <waitfor maxwait="2" maxwaitunit="minute" checkevery="500">
      <not>
        <http url="http://localhost:${test.webcontainer.port}/"/>
      </not>
    </waitfor>
-->
  </target>

  <target name="start-jetty" description="- start the Jetty J2EE container">
    <copy todir="${test.webapp.dir}/WEB-INF/lib">
      <fileset dir="${lib.dir}"/>
    </copy>
    <copy file="${basedir}/velosurf-${version}.jar" todir="${test.webapp.dir}/WEB-INF/lib"/>
    <copy file="${test.lib.dir}/hsqldb-${jar.hsqldb.version}.jar" todir="${test.webapp.dir}/WEB-INF/lib"/>
    <copy file="${test.lib.dir}/commons-collections-${jar.commons-collections.version}.jar" todir="${test.webapp.dir}/WEB-INF/lib"/>
    <copy file="${test.lib.dir}/commons-digester-${jar.commons-digester.version}.jar" todir="${test.webapp.dir}/WEB-INF/lib"/>
     <condition property="jetty-already-running">
       <socket server="127.0.0.1" port="${test.webcontainer.control.port}"/>
     </condition>
     <antcall target="-stop-previous-jetty"/>
     <java fork="true" spawn="true" jar="${test.jetty.dir}/lib/start-6.0.1.jar" dir="${test.jetty.dir}">
       <arg value="etc/jetty.xml"/>
       <sysproperty key="jetty.home" value="${test.jetty.dir}"/>
       <sysproperty key="jetty.port" value="${test.webcontainer.port}"/>
       <sysproperty key="STOP.PORT" value="${test.webcontainer.control.port}"/>
       <sysproperty key="STOP.KEY" value="verysecret"/>
       <sysproperty key="org.mortbay.log.class" value="WebappLogger"/>
       <sysproperty key="velosurf.test.webapp.log.file" value="${test.webapp.dir}/WEB-INF/log/error.log"/>
       <sysproperty key="velosurf.test.webapp.log.context" value="/"/>
<!--       <sysproperty key="velosurf.test.webapp.log.debug" value="${debug}"/> -->
       <sysproperty key="velosurf.test.webapp.log.debug" value="on"/>
     </java>
    <waitfor maxwait="2" maxwaitunit="minute" checkevery="500">
      <http url="http://localhost:${test.webcontainer.port}/"/>
    </waitfor>
    <echo message="web server launched successfully."/>
  </target>

  <target name="stop-jetty" description="- stop the Jetty J2EE container">
    <java fork="true" jar="${test.jetty.dir}/lib/start-6.0.1.jar" dir="${test.jetty.dir}">
      <arg value="--stop"/>
      <sysproperty key="STOP.PORT" value="${test.webcontainer.control.port}"/>
      <sysproperty key="STOP.KEY" value="verysecret"/>
    </java>
  </target>

  <target name="-stop-previous-hsqldb" if="${hsqldb-already-running}">
    <echo>Found a previously running instance of HSQLDB. Closing it...</echo>
    <antcall target="stop-hsqldb"/>
<!--
    <waitfor maxwait="2" maxwaitunit="minute" checkevery="500">
      <not>
        <socket server="127.0.0.1" port="${test.database.port}"/>
      </not>
    </waitfor>
-->
  </target>

  <target name="start-hsqldb" description="- start the HSQLDB database engine">
     <condition property="hsqldb-already-running">
       <socket server="127.0.0.1" port="${test.database.port}"/>
     </condition>
     <antcall target="-stop-previous-hsqldb"/>
    <java fork="true" spawn="true" classname="org.hsqldb.Server">
      <arg value="-address"/>
      <arg value="127.0.0.1"/>
      <arg value="-port"/>
      <arg value="${test.database.port}"/>
      <arg value="-database.0"/>
      <arg value="mem:test"/>
      <arg value="-dbname.0"/>
      <arg value="test"/>
      <classpath>
        <filelist dir="${test.lib.dir}" files="hsqldb-${jar.hsqldb.version}.jar"/>
      </classpath>
    </java>
    <waitfor maxwait="2" maxwaitunit="minute" checkevery="500">
      <socket server="127.0.0.1" port="${test.database.port}"/>
    </waitfor>
    <echo message="database server launched successfully."/>
    <sql driver="org.hsqldb.jdbcDriver" 
         classpath="${test.lib.dir}/hsqldb-${jar.hsqldb.version}.jar"
         url="jdbc:hsqldb:hsql://127.0.0.1:${test.database.port}/test" 
         userid="sa" 
         password=""
         autocommit="true"
         src="${test.dir}/sql/initial.sql"/>
  </target>

  <target name="stop-hsqldb" description="- stop the HSQLDB database engine">
    <sql driver="org.hsqldb.jdbcDriver" 
         classpath="${test.lib.dir}/hsqldb-${jar.hsqldb.version}.jar"
         url="jdbc:hsqldb:hsql://127.0.0.1:${test.database.port}/test" 
         userid="sa" 
         password=""
         autocommit="true">
      SHUTDOWN;
    </sql>
  </target>

  <target name="test" depends="-prepare,-compile-test">
    <antcall target="start-hsqldb"/>
    <antcall target="start-jetty"/>
    <delete dir="${test.rst.dir}"/>
    <mkdir dir="${test.rst.dir}"/>
    <junit dir="${test.dir}"
           fork="true"
           printSummary="withOutAndErr"
           haltonerror="false"
           haltonfailure="false">
<!--
<sysproperty key="log4j.configuration"
                   value="file:///tmp/log4j.properties"/>
-->
      <classpath>
        <path refid="classpath" />
        <path refid="test.classpath" />
        <pathelement path="${test.output.dir}"/>
        <filelist dir="${basedir}" files="velosurf-${version}.jar"/>
      </classpath>

      <batchtest todir="${test.rst.dir}">
        <fileset dir="${test.src.dir}" includes="whitebox/**/*"/>
      </batchtest>

      <batchtest todir="${test.rst.dir}">
        <fileset dir="${test.src.dir}" includes="blackbox/*"/>
      </batchtest>

      <formatter type="plain"/>
    </junit>
    <antcall target="stop-jetty"/>
    <antcall target="stop-hsqldb"/>
  </target>

  <target name="javadoc" depends="-prepare" description="- build javadoc files">

    <property name="javadoc.breakiterator" value="" />	<mkdir dir="${javadoc.destdir}"/>
    <condition property="javadoc.breakiterator" value="-breakiterator" >
      <or>
        <equals arg1="${ant.java.version}" arg2="1.4" />
        <equals arg1="${ant.java.version}" arg2="1.5" />
      </or>
    </condition>

    <property name="javadoc.jdk.href" value="" />
    <property name="javadoc.jdk.offline" value="false" />
    <property name="javadoc.jdk.packaglistLoc" value="" />
    <condition property="javadoc.jdk.href" value="http://java.sun.com/products/jdk/1.2/docs/api/">
      <equals arg1="${ant.java.version}" arg2="1.2" />
    </condition>
    <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.3/docs/api/">
      <equals arg1="${ant.java.version}" arg2="1.3" />
    </condition>
    <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.4/docs/api/">
      <equals arg1="${ant.zojava.version}" arg2="1.4" />
    </condition>
    <condition property="javadoc.jdk.href" value="http://java.sun.com/j2se/1.5/docs/api/">
      <equals arg1="${ant.java.version}" arg2="1.5" />
    </condition>
	
    <javadoc
      sourcepath="${src.dir}"
      packagenames="velosurf.*"
      destdir="${javadoc.destdir}"
      author="true"
      private="true"
      version="true"
      use="true"
	  additionalparam="${javadoc.breakiterator}"
      windowtitle="${project} ${version} API"
      doctitle="${project} ${version} API">
      <link offline="${javadoc.jdk.offline}" href="${javadoc.jdk.href}" packagelistLoc="${javadoc.jdk.packagelistLoc}" />
      <bottom><![CDATA[<div align='center'>~ooOoo~</div>]]></bottom>
      <classpath refid="classpath"/> 
	</javadoc>
  </target>

  <target name="tarball" depends="javadoc,jar" description="- build distribution archive">

    <antcall target="clean"/>

    <mkdir dir="${dist.root}/${final.name}"/>
    <mkdir dir="${dist.root}/${final.name}/src"/>
    <mkdir dir="${dist.root}/${final.name}/docs"/>
    <mkdir dir="${dist.root}/${final.name}/examples"/>
    <mkdir dir="${dist.root}/${final.name}/test"/>
    <mkdir dir="${dist.root}/${final.name}/test/jetty"/>
    <mkdir dir="${dist.root}/${final.name}/test/webapp"/>
    <mkdir dir="${dist.root}/${final.name}/test/webapp/WEB-INF"/>

    <copy todir="${dist.root}/${final.name}/src">
      <fileset dir="${basedir}/src">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${dist.root}/${final.name}/docs">
      <fileset dir="${docs.dir}">
        <include name="**"/>
      </fileset>
    </copy> 

    <copy todir="${dist.root}/${final.name}">
      <fileset dir="${basedir}">
        <include name="CHANGELOG"/>
        <include name="LICENSE"/>
        <include name="NOTICE"/>
        <include name="README"/>
        <include name="TODO"/>
        <include name="build.xml"/>
        <include name="build.properties"/>
      </fileset>
    </copy>
    
    <copy todir="${dist.root}/${final.name}/test">
      <fileset dir="${test.dir}">
        <include name="conf/*"/>
        <include name="hsqlclient.sh"/>
        <include name="hsqldb.sh"/>
        <include name="sql/*"/>
        <include name="src/**"/>
      </fileset>
    </copy>

    <copy todir="${dist.root}/${final.name}/test/webapp">
      <fileset dir="${test.webapp.dir}">
        <include name="*.html.vtl"/>
        <include name="*.html"/>
        <include name="*.js"/>
        <include name="auth/**"/>
        <include name="localized/**"/>
      </fileset>
    </copy>

    <copy todir="${dist.root}/${final.name}/test/jetty">
      <fileset dir="${test.jetty.dir}">
        <include name="etc/*"/>
        <include name="src/*"/>
        <include name="jetty.sh"/>
      </fileset>
    </copy>

    <copy todir="${dist.root}/${final.name}/test/webapp/WEB-INF">
      <fileset dir="${test.webapp.dir}/WEB-INF">
        <include name="*.xml"/>
        <include name="*.properties"/>
      </fileset>
    </copy>
    
    <copy todir="${dist.root}/${final.name}/examples">
      <fileset dir="${basedir}/examples/">
        <include name="*.*"/>
      </fileset>
    </copy>

    <copy file="${basedir}/${final.name}.jar" tofile="${dist.root}/${final.name}/${final.name}.jar"/>

    <delete file="${basedir}/${final.name}.tar" quiet="true"/>
    <delete file="${basedir}/${final.name}.tgz" quiet="true"/>
    <tar tarfile="${basedir}/${final.name}.tar" basedir="${dist.root}" 
         includes="**/${final.name}/**" longfile="gnu"/>
    <gzip zipfile="${basedir}/${final.name}.tgz" src="${basedir}/${final.name}.tar"/>
    <delete file="${basedir}/${final.name}.tar" quiet="true"/>
  </target>

  <target name="dependencies" depends="download" description="- builds an archive of all dependancy libraries">
    <delete file="${basedir}/${final.name}-dependencies.tar" quiet="true"/>
    <delete file="${basedir}/${final.name}-dependencies.tgz" quiet="true"/>
    <tar tarfile="${basedir}/${final.name}-dependencies.tar" basedir="${basedir}" includes="lib/*.jar" longfile="gnu"/>
    <gzip zipfile="${basedir}/${final.name}-dependencies.tgz" src="${basedir}/${final.name}-dependencies.tar"/>
    <delete file="${basedir}/${final.name}-dependencies.tar" quiet="true"/>
  </target>

</project>
