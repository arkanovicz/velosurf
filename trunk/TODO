 - doc about lifecycles

 - Instance should maybe reference a DBRef and not a DB (to control subclasses access)

 - refines that are defined in the model as attributes' attributes

 - xi:include not working in standalone mode with velosurf.Velosurf ?!

Caused by: java.lang.NullPointerException
    at velosurf.web.VelosurfTool.init(VelosurfTool.java:144)
=> catch it and change message to "could not connect to DB"

 - allow customization of LIMIT (like order and refinement)

 - getMap peut marcher avec plus de 2 cols (keycol -> instance)
 - faute d'orthographe "loggued"

 - definition des requetes par contraintes, une contrainte etant une map
  (ex 1 : si la map contient 'jour' alors le critere custom <jour/> between debut and fin doit s'appliquer)
  (ex 2 : si la map contient 'prenom' alors le critere automatique prenom=<prenom/> doit s'appliquer)
 => une espece de power refine sur les attributs
  <attribute><refinment mandatory=true|false [name=] col= />
puis $instance.attribute.refine(context...)

 - make attribute results implement List sans avoir besoin du row (seules les methodes size and co font rouler le rowset) => resetable rowsets
  pour le cas de plusieurs #foreach

 Velosurf  [error] Was expecting an org.jdom.Element, found a org.jdom.Comment: '[Comment: <!-- kept as rowset to be homogeneous with previous attributes -->]'
java.sql.SQLException: Was expecting an org.jdom.Element, found a org.jdom.Comment: '[Comment: <!-- kept as rowset to be homogeneous with previous attributes -->]'
        at velosurf.sql.ConfigLoader.defineAttributes(ConfigLoader.java:334)
        at velosurf.sql.ConfigLoader.loadConfig(ConfigLoader.java:107)
        at velosurf.sql.Database.readConfigFile(Database.java:510)
        at velosurf.sql.Database.getInstance(Database.java:148)
        at velosurf.web.VelosurfTool.getConnection(VelosurfTool.java:283)
        at velosurf.web.VelosurfTool.getDefaultInstance(VelosurfTool.java:342)

 - foreign keys referencing non-primary keys generate exceptions
 - authenticator option for case sensivity
 - add attribute result types: rowset/scalar, map, ...
 - remember when an instance comes from newInstance
 - an "upsert" method
 - $db renvoie {} meme quand il y a des params externes definis... c'est pas bien...

TODO
----
 - instance.insert should check obfuscation too!
 - review UserContext life cycle (threads/sessions) - is it thread-pooling resistant?
 - when no pk defined, there should be an error message at reverse enginering time
 - Entity & Attribute, as long as EntityReference and AttributeReference, must share a common ancestor
 - strip table name prefixes on demand (like "tab_")
 - add AttrRef/EntityRef.getList ? (non: rowset/scalar) - EntityRef.getMap ?
 - factorize Action and Attribute!
 - msg "Ignoring second definition for attribute" should explicitely state that the ignored def is the implicit one
 - when result=row, attref should return null if not found
 - AttributeReference.toString() => null
 - doc about attributeref.map (and should also be attribute.map, by the way)
 - doc about external parameters
 - do sthing about serialization / transience (cf. tomcat sessions persistance for instance)
 - add an EntityReference.perform(action,vaarg) method
 - warn on unused attributes in config file
 - "mangle" attribute to mangle table and/or field prefixes (but achievable using aliases)
 - review extractColumnValues usage (how to choose to use source or destination column names, in regard to aliases)
 - make foreign-key attribute optionnal (=> use natural join)
 - optionnaly use foreign key names when reverse enginering
 - kill the broken pipe mysql bug (occurs sometimes with mysql - rare but tedious)
   workaround: set a very long timeout in my.cnf : [mysqld] wait_timeout = 288000
 - implement caching also for root attributes
 - automatically propagate obfuscation along foreign keys
 - introspection of Instance subclasses for specific getters and setters (avoid loops!)
 - testcases for "parentkey.subkey" attributes parameters
 - testcases for multiple aliases
 - display build # in logs at startup
 - naming collisions detection for aliases
 - TagCloudTool as an example
 - Instances should check external POJOs for some additional methods, like "validate"
 - facilitates acces to Database objects from Java
 - RowIterator has to be splitted: one core object in sql (with more advanced accessors like InputStreams), one wrapper in context
 - tool for one-shot messages in the session (like error messages that vanish once displayed)
 - should newInstance(map) call validation?
 - when/how is $db.error cleared? document
 - review policy when column name clashes with attribute name: maybe add a RowIterator.internalGet called from ReadOnlyMap.
   Plus, RowIterator get javadoc is wrong for now.
 - testcase for exported key
 - when SQL exceptions are thrown from context objects, would it be possible to display line/col position in template?
 - clarify user context scope and life cycle
 - put version and debugging options in build.properties
 - validation: form values should be put as request attributes after the redirect!
 - docs: separate read-only methods and others
 - move auth, l10n and template name filter to an extension module (in the source tree & the docs)
 - test cache reset
 - change /** ... \n */ to /** ... */
 - parse conditions in refine and columns in order to apply aliases ?
 - review pools timeout
 - pool transaction statements
 - testcase for aliasing
 - testcases for POJO mapping
 - testcase for localization
 - review code for Logger.debug/trace strings calculation (avoid them!)
 - use DatabaseMetaData.storeXXXCaseIdentifiers() to determine case sensivity
 - a good dissertation about HTTP authentication to place somewhere http://www.artima.com/weblogs/viewpost.jsp?thread=155252
 - l10n: provide flags
 - obfuscation key should be specific to entities
 - integration with a graphic reporting library
 - docfix: a drivers.html page about DriverInfo
 - allow the database connection to be configured via a jndi resource
 - inheritance of entities in model.xml?
 - ability to query current schema (ex : under Oracle :  select sys_context('userenv','current_schema') from dual) [done by caching the given schema for now]
 - add EntityReference.insert(List(columns in natural order))?
 - SQL enums? is there sthing to do to support them?
 - id broker?
 - automatic reload when the configuration file is changed (but depends upon container!)
 - 'size' attribute on multivalued attributes? (approx JDBC size? exact size?)
 - positionned updates and deletes (via UserContext)
 - paging via AbstractSearchTool?
 - database metadata informations and operations
 - allow setters by foreign-key (eg. $book.author = $author instead of $book.author_id = $author.id) ?
 - XML databases access via IBM XML Data Mediator?
